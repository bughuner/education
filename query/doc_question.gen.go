// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"education/model"
)

func newDocQuestion(db *gorm.DB, opts ...gen.DOOption) docQuestion {
	_docQuestion := docQuestion{}

	_docQuestion.docQuestionDo.UseDB(db, opts...)
	_docQuestion.docQuestionDo.UseModel(&model.DocQuestion{})

	tableName := _docQuestion.docQuestionDo.TableName()
	_docQuestion.ALL = field.NewAsterisk(tableName)
	_docQuestion.ID = field.NewString(tableName, "id")
	_docQuestion.DocID = field.NewString(tableName, "doc_id")
	_docQuestion.QuestionID = field.NewString(tableName, "question_id")

	_docQuestion.fillFieldMap()

	return _docQuestion
}

type docQuestion struct {
	docQuestionDo docQuestionDo

	ALL        field.Asterisk
	ID         field.String // 文章问题id
	DocID      field.String // 文章id
	QuestionID field.String // 问题id

	fieldMap map[string]field.Expr
}

func (d docQuestion) Table(newTableName string) *docQuestion {
	d.docQuestionDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d docQuestion) As(alias string) *docQuestion {
	d.docQuestionDo.DO = *(d.docQuestionDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *docQuestion) updateTableName(table string) *docQuestion {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.DocID = field.NewString(table, "doc_id")
	d.QuestionID = field.NewString(table, "question_id")

	d.fillFieldMap()

	return d
}

func (d *docQuestion) WithContext(ctx context.Context) IDocQuestionDo {
	return d.docQuestionDo.WithContext(ctx)
}

func (d docQuestion) TableName() string { return d.docQuestionDo.TableName() }

func (d docQuestion) Alias() string { return d.docQuestionDo.Alias() }

func (d *docQuestion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *docQuestion) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 3)
	d.fieldMap["id"] = d.ID
	d.fieldMap["doc_id"] = d.DocID
	d.fieldMap["question_id"] = d.QuestionID
}

func (d docQuestion) clone(db *gorm.DB) docQuestion {
	d.docQuestionDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d docQuestion) replaceDB(db *gorm.DB) docQuestion {
	d.docQuestionDo.ReplaceDB(db)
	return d
}

type docQuestionDo struct{ gen.DO }

type IDocQuestionDo interface {
	gen.SubQuery
	Debug() IDocQuestionDo
	WithContext(ctx context.Context) IDocQuestionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDocQuestionDo
	WriteDB() IDocQuestionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDocQuestionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDocQuestionDo
	Not(conds ...gen.Condition) IDocQuestionDo
	Or(conds ...gen.Condition) IDocQuestionDo
	Select(conds ...field.Expr) IDocQuestionDo
	Where(conds ...gen.Condition) IDocQuestionDo
	Order(conds ...field.Expr) IDocQuestionDo
	Distinct(cols ...field.Expr) IDocQuestionDo
	Omit(cols ...field.Expr) IDocQuestionDo
	Join(table schema.Tabler, on ...field.Expr) IDocQuestionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDocQuestionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDocQuestionDo
	Group(cols ...field.Expr) IDocQuestionDo
	Having(conds ...gen.Condition) IDocQuestionDo
	Limit(limit int) IDocQuestionDo
	Offset(offset int) IDocQuestionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDocQuestionDo
	Unscoped() IDocQuestionDo
	Create(values ...*model.DocQuestion) error
	CreateInBatches(values []*model.DocQuestion, batchSize int) error
	Save(values ...*model.DocQuestion) error
	First() (*model.DocQuestion, error)
	Take() (*model.DocQuestion, error)
	Last() (*model.DocQuestion, error)
	Find() ([]*model.DocQuestion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DocQuestion, err error)
	FindInBatches(result *[]*model.DocQuestion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DocQuestion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDocQuestionDo
	Assign(attrs ...field.AssignExpr) IDocQuestionDo
	Joins(fields ...field.RelationField) IDocQuestionDo
	Preload(fields ...field.RelationField) IDocQuestionDo
	FirstOrInit() (*model.DocQuestion, error)
	FirstOrCreate() (*model.DocQuestion, error)
	FindByPage(offset int, limit int) (result []*model.DocQuestion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDocQuestionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d docQuestionDo) Debug() IDocQuestionDo {
	return d.withDO(d.DO.Debug())
}

func (d docQuestionDo) WithContext(ctx context.Context) IDocQuestionDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d docQuestionDo) ReadDB() IDocQuestionDo {
	return d.Clauses(dbresolver.Read)
}

func (d docQuestionDo) WriteDB() IDocQuestionDo {
	return d.Clauses(dbresolver.Write)
}

func (d docQuestionDo) Session(config *gorm.Session) IDocQuestionDo {
	return d.withDO(d.DO.Session(config))
}

func (d docQuestionDo) Clauses(conds ...clause.Expression) IDocQuestionDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d docQuestionDo) Returning(value interface{}, columns ...string) IDocQuestionDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d docQuestionDo) Not(conds ...gen.Condition) IDocQuestionDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d docQuestionDo) Or(conds ...gen.Condition) IDocQuestionDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d docQuestionDo) Select(conds ...field.Expr) IDocQuestionDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d docQuestionDo) Where(conds ...gen.Condition) IDocQuestionDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d docQuestionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDocQuestionDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d docQuestionDo) Order(conds ...field.Expr) IDocQuestionDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d docQuestionDo) Distinct(cols ...field.Expr) IDocQuestionDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d docQuestionDo) Omit(cols ...field.Expr) IDocQuestionDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d docQuestionDo) Join(table schema.Tabler, on ...field.Expr) IDocQuestionDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d docQuestionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDocQuestionDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d docQuestionDo) RightJoin(table schema.Tabler, on ...field.Expr) IDocQuestionDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d docQuestionDo) Group(cols ...field.Expr) IDocQuestionDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d docQuestionDo) Having(conds ...gen.Condition) IDocQuestionDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d docQuestionDo) Limit(limit int) IDocQuestionDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d docQuestionDo) Offset(offset int) IDocQuestionDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d docQuestionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDocQuestionDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d docQuestionDo) Unscoped() IDocQuestionDo {
	return d.withDO(d.DO.Unscoped())
}

func (d docQuestionDo) Create(values ...*model.DocQuestion) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d docQuestionDo) CreateInBatches(values []*model.DocQuestion, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d docQuestionDo) Save(values ...*model.DocQuestion) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d docQuestionDo) First() (*model.DocQuestion, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocQuestion), nil
	}
}

func (d docQuestionDo) Take() (*model.DocQuestion, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocQuestion), nil
	}
}

func (d docQuestionDo) Last() (*model.DocQuestion, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocQuestion), nil
	}
}

func (d docQuestionDo) Find() ([]*model.DocQuestion, error) {
	result, err := d.DO.Find()
	return result.([]*model.DocQuestion), err
}

func (d docQuestionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DocQuestion, err error) {
	buf := make([]*model.DocQuestion, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d docQuestionDo) FindInBatches(result *[]*model.DocQuestion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d docQuestionDo) Attrs(attrs ...field.AssignExpr) IDocQuestionDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d docQuestionDo) Assign(attrs ...field.AssignExpr) IDocQuestionDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d docQuestionDo) Joins(fields ...field.RelationField) IDocQuestionDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d docQuestionDo) Preload(fields ...field.RelationField) IDocQuestionDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d docQuestionDo) FirstOrInit() (*model.DocQuestion, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocQuestion), nil
	}
}

func (d docQuestionDo) FirstOrCreate() (*model.DocQuestion, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocQuestion), nil
	}
}

func (d docQuestionDo) FindByPage(offset int, limit int) (result []*model.DocQuestion, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d docQuestionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d docQuestionDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d docQuestionDo) Delete(models ...*model.DocQuestion) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *docQuestionDo) withDO(do gen.Dao) *docQuestionDo {
	d.DO = *do.(*gen.DO)
	return d
}
