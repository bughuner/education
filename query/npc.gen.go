// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"education/model"
)

func newNpc(db *gorm.DB, opts ...gen.DOOption) npc {
	_npc := npc{}

	_npc.npcDo.UseDB(db, opts...)
	_npc.npcDo.UseModel(&model.Npc{})

	tableName := _npc.npcDo.TableName()
	_npc.ALL = field.NewAsterisk(tableName)
	_npc.ID = field.NewString(tableName, "id")
	_npc.Name = field.NewString(tableName, "name")
	_npc.Image = field.NewString(tableName, "image")
	_npc.Introduction = field.NewString(tableName, "introduction")
	_npc.Horizon = field.NewInt64(tableName, "horizon")
	_npc.Ordinate = field.NewInt64(tableName, "ordinate")

	_npc.fillFieldMap()

	return _npc
}

type npc struct {
	npcDo npcDo

	ALL          field.Asterisk
	ID           field.String // npc的id
	Name         field.String // 名称
	Image        field.String // 头像
	Introduction field.String // 自我介绍
	Horizon      field.Int64  // 横坐标
	Ordinate     field.Int64  // 纵坐标

	fieldMap map[string]field.Expr
}

func (n npc) Table(newTableName string) *npc {
	n.npcDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n npc) As(alias string) *npc {
	n.npcDo.DO = *(n.npcDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *npc) updateTableName(table string) *npc {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewString(table, "id")
	n.Name = field.NewString(table, "name")
	n.Image = field.NewString(table, "image")
	n.Introduction = field.NewString(table, "introduction")
	n.Horizon = field.NewInt64(table, "horizon")
	n.Ordinate = field.NewInt64(table, "ordinate")

	n.fillFieldMap()

	return n
}

func (n *npc) WithContext(ctx context.Context) INpcDo { return n.npcDo.WithContext(ctx) }

func (n npc) TableName() string { return n.npcDo.TableName() }

func (n npc) Alias() string { return n.npcDo.Alias() }

func (n *npc) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *npc) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 6)
	n.fieldMap["id"] = n.ID
	n.fieldMap["name"] = n.Name
	n.fieldMap["image"] = n.Image
	n.fieldMap["introduction"] = n.Introduction
	n.fieldMap["horizon"] = n.Horizon
	n.fieldMap["ordinate"] = n.Ordinate
}

func (n npc) clone(db *gorm.DB) npc {
	n.npcDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n npc) replaceDB(db *gorm.DB) npc {
	n.npcDo.ReplaceDB(db)
	return n
}

type npcDo struct{ gen.DO }

type INpcDo interface {
	gen.SubQuery
	Debug() INpcDo
	WithContext(ctx context.Context) INpcDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INpcDo
	WriteDB() INpcDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INpcDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INpcDo
	Not(conds ...gen.Condition) INpcDo
	Or(conds ...gen.Condition) INpcDo
	Select(conds ...field.Expr) INpcDo
	Where(conds ...gen.Condition) INpcDo
	Order(conds ...field.Expr) INpcDo
	Distinct(cols ...field.Expr) INpcDo
	Omit(cols ...field.Expr) INpcDo
	Join(table schema.Tabler, on ...field.Expr) INpcDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INpcDo
	RightJoin(table schema.Tabler, on ...field.Expr) INpcDo
	Group(cols ...field.Expr) INpcDo
	Having(conds ...gen.Condition) INpcDo
	Limit(limit int) INpcDo
	Offset(offset int) INpcDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INpcDo
	Unscoped() INpcDo
	Create(values ...*model.Npc) error
	CreateInBatches(values []*model.Npc, batchSize int) error
	Save(values ...*model.Npc) error
	First() (*model.Npc, error)
	Take() (*model.Npc, error)
	Last() (*model.Npc, error)
	Find() ([]*model.Npc, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Npc, err error)
	FindInBatches(result *[]*model.Npc, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Npc) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INpcDo
	Assign(attrs ...field.AssignExpr) INpcDo
	Joins(fields ...field.RelationField) INpcDo
	Preload(fields ...field.RelationField) INpcDo
	FirstOrInit() (*model.Npc, error)
	FirstOrCreate() (*model.Npc, error)
	FindByPage(offset int, limit int) (result []*model.Npc, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INpcDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n npcDo) Debug() INpcDo {
	return n.withDO(n.DO.Debug())
}

func (n npcDo) WithContext(ctx context.Context) INpcDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n npcDo) ReadDB() INpcDo {
	return n.Clauses(dbresolver.Read)
}

func (n npcDo) WriteDB() INpcDo {
	return n.Clauses(dbresolver.Write)
}

func (n npcDo) Session(config *gorm.Session) INpcDo {
	return n.withDO(n.DO.Session(config))
}

func (n npcDo) Clauses(conds ...clause.Expression) INpcDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n npcDo) Returning(value interface{}, columns ...string) INpcDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n npcDo) Not(conds ...gen.Condition) INpcDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n npcDo) Or(conds ...gen.Condition) INpcDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n npcDo) Select(conds ...field.Expr) INpcDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n npcDo) Where(conds ...gen.Condition) INpcDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n npcDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) INpcDo {
	return n.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (n npcDo) Order(conds ...field.Expr) INpcDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n npcDo) Distinct(cols ...field.Expr) INpcDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n npcDo) Omit(cols ...field.Expr) INpcDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n npcDo) Join(table schema.Tabler, on ...field.Expr) INpcDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n npcDo) LeftJoin(table schema.Tabler, on ...field.Expr) INpcDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n npcDo) RightJoin(table schema.Tabler, on ...field.Expr) INpcDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n npcDo) Group(cols ...field.Expr) INpcDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n npcDo) Having(conds ...gen.Condition) INpcDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n npcDo) Limit(limit int) INpcDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n npcDo) Offset(offset int) INpcDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n npcDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INpcDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n npcDo) Unscoped() INpcDo {
	return n.withDO(n.DO.Unscoped())
}

func (n npcDo) Create(values ...*model.Npc) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n npcDo) CreateInBatches(values []*model.Npc, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n npcDo) Save(values ...*model.Npc) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n npcDo) First() (*model.Npc, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Npc), nil
	}
}

func (n npcDo) Take() (*model.Npc, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Npc), nil
	}
}

func (n npcDo) Last() (*model.Npc, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Npc), nil
	}
}

func (n npcDo) Find() ([]*model.Npc, error) {
	result, err := n.DO.Find()
	return result.([]*model.Npc), err
}

func (n npcDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Npc, err error) {
	buf := make([]*model.Npc, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n npcDo) FindInBatches(result *[]*model.Npc, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n npcDo) Attrs(attrs ...field.AssignExpr) INpcDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n npcDo) Assign(attrs ...field.AssignExpr) INpcDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n npcDo) Joins(fields ...field.RelationField) INpcDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n npcDo) Preload(fields ...field.RelationField) INpcDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n npcDo) FirstOrInit() (*model.Npc, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Npc), nil
	}
}

func (n npcDo) FirstOrCreate() (*model.Npc, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Npc), nil
	}
}

func (n npcDo) FindByPage(offset int, limit int) (result []*model.Npc, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n npcDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n npcDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n npcDo) Delete(models ...*model.Npc) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *npcDo) withDO(do gen.Dao) *npcDo {
	n.DO = *do.(*gen.DO)
	return n
}
