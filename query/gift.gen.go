// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"education/model"
)

func newGift(db *gorm.DB, opts ...gen.DOOption) gift {
	_gift := gift{}

	_gift.giftDo.UseDB(db, opts...)
	_gift.giftDo.UseModel(&model.Gift{})

	tableName := _gift.giftDo.TableName()
	_gift.ALL = field.NewAsterisk(tableName)
	_gift.ID = field.NewString(tableName, "id")
	_gift.Name = field.NewString(tableName, "name")
	_gift.Introduction = field.NewString(tableName, "introduction")
	_gift.Image = field.NewString(tableName, "image")
	_gift.Coin = field.NewInt64(tableName, "coin")
	_gift.Count = field.NewInt64(tableName, "count")

	_gift.fillFieldMap()

	return _gift
}

type gift struct {
	giftDo giftDo

	ALL          field.Asterisk
	ID           field.String // 礼物的id
	Name         field.String // 礼物名称
	Introduction field.String // 礼物介绍
	Image        field.String // 图像链接
	Coin         field.Int64  // 价值金币数
	Count        field.Int64  // 数量

	fieldMap map[string]field.Expr
}

func (g gift) Table(newTableName string) *gift {
	g.giftDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gift) As(alias string) *gift {
	g.giftDo.DO = *(g.giftDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gift) updateTableName(table string) *gift {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewString(table, "id")
	g.Name = field.NewString(table, "name")
	g.Introduction = field.NewString(table, "introduction")
	g.Image = field.NewString(table, "image")
	g.Coin = field.NewInt64(table, "coin")
	g.Count = field.NewInt64(table, "count")

	g.fillFieldMap()

	return g
}

func (g *gift) WithContext(ctx context.Context) IGiftDo { return g.giftDo.WithContext(ctx) }

func (g gift) TableName() string { return g.giftDo.TableName() }

func (g gift) Alias() string { return g.giftDo.Alias() }

func (g *gift) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gift) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 6)
	g.fieldMap["id"] = g.ID
	g.fieldMap["name"] = g.Name
	g.fieldMap["introduction"] = g.Introduction
	g.fieldMap["image"] = g.Image
	g.fieldMap["coin"] = g.Coin
	g.fieldMap["count"] = g.Count
}

func (g gift) clone(db *gorm.DB) gift {
	g.giftDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gift) replaceDB(db *gorm.DB) gift {
	g.giftDo.ReplaceDB(db)
	return g
}

type giftDo struct{ gen.DO }

type IGiftDo interface {
	gen.SubQuery
	Debug() IGiftDo
	WithContext(ctx context.Context) IGiftDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGiftDo
	WriteDB() IGiftDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGiftDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGiftDo
	Not(conds ...gen.Condition) IGiftDo
	Or(conds ...gen.Condition) IGiftDo
	Select(conds ...field.Expr) IGiftDo
	Where(conds ...gen.Condition) IGiftDo
	Order(conds ...field.Expr) IGiftDo
	Distinct(cols ...field.Expr) IGiftDo
	Omit(cols ...field.Expr) IGiftDo
	Join(table schema.Tabler, on ...field.Expr) IGiftDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGiftDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGiftDo
	Group(cols ...field.Expr) IGiftDo
	Having(conds ...gen.Condition) IGiftDo
	Limit(limit int) IGiftDo
	Offset(offset int) IGiftDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGiftDo
	Unscoped() IGiftDo
	Create(values ...*model.Gift) error
	CreateInBatches(values []*model.Gift, batchSize int) error
	Save(values ...*model.Gift) error
	First() (*model.Gift, error)
	Take() (*model.Gift, error)
	Last() (*model.Gift, error)
	Find() ([]*model.Gift, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Gift, err error)
	FindInBatches(result *[]*model.Gift, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Gift) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGiftDo
	Assign(attrs ...field.AssignExpr) IGiftDo
	Joins(fields ...field.RelationField) IGiftDo
	Preload(fields ...field.RelationField) IGiftDo
	FirstOrInit() (*model.Gift, error)
	FirstOrCreate() (*model.Gift, error)
	FindByPage(offset int, limit int) (result []*model.Gift, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGiftDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g giftDo) Debug() IGiftDo {
	return g.withDO(g.DO.Debug())
}

func (g giftDo) WithContext(ctx context.Context) IGiftDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g giftDo) ReadDB() IGiftDo {
	return g.Clauses(dbresolver.Read)
}

func (g giftDo) WriteDB() IGiftDo {
	return g.Clauses(dbresolver.Write)
}

func (g giftDo) Session(config *gorm.Session) IGiftDo {
	return g.withDO(g.DO.Session(config))
}

func (g giftDo) Clauses(conds ...clause.Expression) IGiftDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g giftDo) Returning(value interface{}, columns ...string) IGiftDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g giftDo) Not(conds ...gen.Condition) IGiftDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g giftDo) Or(conds ...gen.Condition) IGiftDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g giftDo) Select(conds ...field.Expr) IGiftDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g giftDo) Where(conds ...gen.Condition) IGiftDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g giftDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGiftDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g giftDo) Order(conds ...field.Expr) IGiftDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g giftDo) Distinct(cols ...field.Expr) IGiftDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g giftDo) Omit(cols ...field.Expr) IGiftDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g giftDo) Join(table schema.Tabler, on ...field.Expr) IGiftDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g giftDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGiftDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g giftDo) RightJoin(table schema.Tabler, on ...field.Expr) IGiftDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g giftDo) Group(cols ...field.Expr) IGiftDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g giftDo) Having(conds ...gen.Condition) IGiftDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g giftDo) Limit(limit int) IGiftDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g giftDo) Offset(offset int) IGiftDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g giftDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGiftDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g giftDo) Unscoped() IGiftDo {
	return g.withDO(g.DO.Unscoped())
}

func (g giftDo) Create(values ...*model.Gift) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g giftDo) CreateInBatches(values []*model.Gift, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g giftDo) Save(values ...*model.Gift) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g giftDo) First() (*model.Gift, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gift), nil
	}
}

func (g giftDo) Take() (*model.Gift, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gift), nil
	}
}

func (g giftDo) Last() (*model.Gift, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gift), nil
	}
}

func (g giftDo) Find() ([]*model.Gift, error) {
	result, err := g.DO.Find()
	return result.([]*model.Gift), err
}

func (g giftDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Gift, err error) {
	buf := make([]*model.Gift, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g giftDo) FindInBatches(result *[]*model.Gift, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g giftDo) Attrs(attrs ...field.AssignExpr) IGiftDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g giftDo) Assign(attrs ...field.AssignExpr) IGiftDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g giftDo) Joins(fields ...field.RelationField) IGiftDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g giftDo) Preload(fields ...field.RelationField) IGiftDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g giftDo) FirstOrInit() (*model.Gift, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gift), nil
	}
}

func (g giftDo) FirstOrCreate() (*model.Gift, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gift), nil
	}
}

func (g giftDo) FindByPage(offset int, limit int) (result []*model.Gift, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g giftDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g giftDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g giftDo) Delete(models ...*model.Gift) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *giftDo) withDO(do gen.Dao) *giftDo {
	g.DO = *do.(*gen.DO)
	return g
}
