// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"education/model"
)

func newMonsterQuestion(db *gorm.DB, opts ...gen.DOOption) monsterQuestion {
	_monsterQuestion := monsterQuestion{}

	_monsterQuestion.monsterQuestionDo.UseDB(db, opts...)
	_monsterQuestion.monsterQuestionDo.UseModel(&model.MonsterQuestion{})

	tableName := _monsterQuestion.monsterQuestionDo.TableName()
	_monsterQuestion.ALL = field.NewAsterisk(tableName)
	_monsterQuestion.ID = field.NewString(tableName, "id")
	_monsterQuestion.MonsterID = field.NewString(tableName, "monster_id")
	_monsterQuestion.QuestionID = field.NewString(tableName, "question_id")

	_monsterQuestion.fillFieldMap()

	return _monsterQuestion
}

type monsterQuestion struct {
	monsterQuestionDo monsterQuestionDo

	ALL        field.Asterisk
	ID         field.String // 怪物问题Id
	MonsterID  field.String // 怪物id
	QuestionID field.String // 问题id

	fieldMap map[string]field.Expr
}

func (m monsterQuestion) Table(newTableName string) *monsterQuestion {
	m.monsterQuestionDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m monsterQuestion) As(alias string) *monsterQuestion {
	m.monsterQuestionDo.DO = *(m.monsterQuestionDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *monsterQuestion) updateTableName(table string) *monsterQuestion {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewString(table, "id")
	m.MonsterID = field.NewString(table, "monster_id")
	m.QuestionID = field.NewString(table, "question_id")

	m.fillFieldMap()

	return m
}

func (m *monsterQuestion) WithContext(ctx context.Context) IMonsterQuestionDo {
	return m.monsterQuestionDo.WithContext(ctx)
}

func (m monsterQuestion) TableName() string { return m.monsterQuestionDo.TableName() }

func (m monsterQuestion) Alias() string { return m.monsterQuestionDo.Alias() }

func (m *monsterQuestion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *monsterQuestion) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 3)
	m.fieldMap["id"] = m.ID
	m.fieldMap["monster_id"] = m.MonsterID
	m.fieldMap["question_id"] = m.QuestionID
}

func (m monsterQuestion) clone(db *gorm.DB) monsterQuestion {
	m.monsterQuestionDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m monsterQuestion) replaceDB(db *gorm.DB) monsterQuestion {
	m.monsterQuestionDo.ReplaceDB(db)
	return m
}

type monsterQuestionDo struct{ gen.DO }

type IMonsterQuestionDo interface {
	gen.SubQuery
	Debug() IMonsterQuestionDo
	WithContext(ctx context.Context) IMonsterQuestionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMonsterQuestionDo
	WriteDB() IMonsterQuestionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMonsterQuestionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMonsterQuestionDo
	Not(conds ...gen.Condition) IMonsterQuestionDo
	Or(conds ...gen.Condition) IMonsterQuestionDo
	Select(conds ...field.Expr) IMonsterQuestionDo
	Where(conds ...gen.Condition) IMonsterQuestionDo
	Order(conds ...field.Expr) IMonsterQuestionDo
	Distinct(cols ...field.Expr) IMonsterQuestionDo
	Omit(cols ...field.Expr) IMonsterQuestionDo
	Join(table schema.Tabler, on ...field.Expr) IMonsterQuestionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMonsterQuestionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMonsterQuestionDo
	Group(cols ...field.Expr) IMonsterQuestionDo
	Having(conds ...gen.Condition) IMonsterQuestionDo
	Limit(limit int) IMonsterQuestionDo
	Offset(offset int) IMonsterQuestionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMonsterQuestionDo
	Unscoped() IMonsterQuestionDo
	Create(values ...*model.MonsterQuestion) error
	CreateInBatches(values []*model.MonsterQuestion, batchSize int) error
	Save(values ...*model.MonsterQuestion) error
	First() (*model.MonsterQuestion, error)
	Take() (*model.MonsterQuestion, error)
	Last() (*model.MonsterQuestion, error)
	Find() ([]*model.MonsterQuestion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonsterQuestion, err error)
	FindInBatches(result *[]*model.MonsterQuestion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MonsterQuestion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMonsterQuestionDo
	Assign(attrs ...field.AssignExpr) IMonsterQuestionDo
	Joins(fields ...field.RelationField) IMonsterQuestionDo
	Preload(fields ...field.RelationField) IMonsterQuestionDo
	FirstOrInit() (*model.MonsterQuestion, error)
	FirstOrCreate() (*model.MonsterQuestion, error)
	FindByPage(offset int, limit int) (result []*model.MonsterQuestion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMonsterQuestionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m monsterQuestionDo) Debug() IMonsterQuestionDo {
	return m.withDO(m.DO.Debug())
}

func (m monsterQuestionDo) WithContext(ctx context.Context) IMonsterQuestionDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m monsterQuestionDo) ReadDB() IMonsterQuestionDo {
	return m.Clauses(dbresolver.Read)
}

func (m monsterQuestionDo) WriteDB() IMonsterQuestionDo {
	return m.Clauses(dbresolver.Write)
}

func (m monsterQuestionDo) Session(config *gorm.Session) IMonsterQuestionDo {
	return m.withDO(m.DO.Session(config))
}

func (m monsterQuestionDo) Clauses(conds ...clause.Expression) IMonsterQuestionDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m monsterQuestionDo) Returning(value interface{}, columns ...string) IMonsterQuestionDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m monsterQuestionDo) Not(conds ...gen.Condition) IMonsterQuestionDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m monsterQuestionDo) Or(conds ...gen.Condition) IMonsterQuestionDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m monsterQuestionDo) Select(conds ...field.Expr) IMonsterQuestionDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m monsterQuestionDo) Where(conds ...gen.Condition) IMonsterQuestionDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m monsterQuestionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMonsterQuestionDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m monsterQuestionDo) Order(conds ...field.Expr) IMonsterQuestionDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m monsterQuestionDo) Distinct(cols ...field.Expr) IMonsterQuestionDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m monsterQuestionDo) Omit(cols ...field.Expr) IMonsterQuestionDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m monsterQuestionDo) Join(table schema.Tabler, on ...field.Expr) IMonsterQuestionDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m monsterQuestionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMonsterQuestionDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m monsterQuestionDo) RightJoin(table schema.Tabler, on ...field.Expr) IMonsterQuestionDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m monsterQuestionDo) Group(cols ...field.Expr) IMonsterQuestionDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m monsterQuestionDo) Having(conds ...gen.Condition) IMonsterQuestionDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m monsterQuestionDo) Limit(limit int) IMonsterQuestionDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m monsterQuestionDo) Offset(offset int) IMonsterQuestionDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m monsterQuestionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMonsterQuestionDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m monsterQuestionDo) Unscoped() IMonsterQuestionDo {
	return m.withDO(m.DO.Unscoped())
}

func (m monsterQuestionDo) Create(values ...*model.MonsterQuestion) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m monsterQuestionDo) CreateInBatches(values []*model.MonsterQuestion, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m monsterQuestionDo) Save(values ...*model.MonsterQuestion) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m monsterQuestionDo) First() (*model.MonsterQuestion, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonsterQuestion), nil
	}
}

func (m monsterQuestionDo) Take() (*model.MonsterQuestion, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonsterQuestion), nil
	}
}

func (m monsterQuestionDo) Last() (*model.MonsterQuestion, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonsterQuestion), nil
	}
}

func (m monsterQuestionDo) Find() ([]*model.MonsterQuestion, error) {
	result, err := m.DO.Find()
	return result.([]*model.MonsterQuestion), err
}

func (m monsterQuestionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonsterQuestion, err error) {
	buf := make([]*model.MonsterQuestion, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m monsterQuestionDo) FindInBatches(result *[]*model.MonsterQuestion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m monsterQuestionDo) Attrs(attrs ...field.AssignExpr) IMonsterQuestionDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m monsterQuestionDo) Assign(attrs ...field.AssignExpr) IMonsterQuestionDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m monsterQuestionDo) Joins(fields ...field.RelationField) IMonsterQuestionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m monsterQuestionDo) Preload(fields ...field.RelationField) IMonsterQuestionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m monsterQuestionDo) FirstOrInit() (*model.MonsterQuestion, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonsterQuestion), nil
	}
}

func (m monsterQuestionDo) FirstOrCreate() (*model.MonsterQuestion, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonsterQuestion), nil
	}
}

func (m monsterQuestionDo) FindByPage(offset int, limit int) (result []*model.MonsterQuestion, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m monsterQuestionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m monsterQuestionDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m monsterQuestionDo) Delete(models ...*model.MonsterQuestion) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *monsterQuestionDo) withDO(do gen.Dao) *monsterQuestionDo {
	m.DO = *do.(*gen.DO)
	return m
}
