// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"education/model"
)

func newExchangeGift(db *gorm.DB, opts ...gen.DOOption) exchangeGift {
	_exchangeGift := exchangeGift{}

	_exchangeGift.exchangeGiftDo.UseDB(db, opts...)
	_exchangeGift.exchangeGiftDo.UseModel(&model.ExchangeGift{})

	tableName := _exchangeGift.exchangeGiftDo.TableName()
	_exchangeGift.ALL = field.NewAsterisk(tableName)
	_exchangeGift.ID = field.NewString(tableName, "id")
	_exchangeGift.UserID = field.NewString(tableName, "user_id")
	_exchangeGift.GiftID = field.NewString(tableName, "gift_id")
	_exchangeGift.Count = field.NewInt64(tableName, "count")
	_exchangeGift.Time = field.NewInt64(tableName, "time")

	_exchangeGift.fillFieldMap()

	return _exchangeGift
}

type exchangeGift struct {
	exchangeGiftDo exchangeGiftDo

	ALL    field.Asterisk
	ID     field.String // 礼物兑换id
	UserID field.String // 用户id
	GiftID field.String // 物品id
	Count  field.Int64  // 兑换数量
	Time   field.Int64  // 兑换时间

	fieldMap map[string]field.Expr
}

func (e exchangeGift) Table(newTableName string) *exchangeGift {
	e.exchangeGiftDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e exchangeGift) As(alias string) *exchangeGift {
	e.exchangeGiftDo.DO = *(e.exchangeGiftDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *exchangeGift) updateTableName(table string) *exchangeGift {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewString(table, "id")
	e.UserID = field.NewString(table, "user_id")
	e.GiftID = field.NewString(table, "gift_id")
	e.Count = field.NewInt64(table, "count")
	e.Time = field.NewInt64(table, "time")

	e.fillFieldMap()

	return e
}

func (e *exchangeGift) WithContext(ctx context.Context) IExchangeGiftDo {
	return e.exchangeGiftDo.WithContext(ctx)
}

func (e exchangeGift) TableName() string { return e.exchangeGiftDo.TableName() }

func (e exchangeGift) Alias() string { return e.exchangeGiftDo.Alias() }

func (e *exchangeGift) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *exchangeGift) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 5)
	e.fieldMap["id"] = e.ID
	e.fieldMap["user_id"] = e.UserID
	e.fieldMap["gift_id"] = e.GiftID
	e.fieldMap["count"] = e.Count
	e.fieldMap["time"] = e.Time
}

func (e exchangeGift) clone(db *gorm.DB) exchangeGift {
	e.exchangeGiftDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e exchangeGift) replaceDB(db *gorm.DB) exchangeGift {
	e.exchangeGiftDo.ReplaceDB(db)
	return e
}

type exchangeGiftDo struct{ gen.DO }

type IExchangeGiftDo interface {
	gen.SubQuery
	Debug() IExchangeGiftDo
	WithContext(ctx context.Context) IExchangeGiftDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IExchangeGiftDo
	WriteDB() IExchangeGiftDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IExchangeGiftDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IExchangeGiftDo
	Not(conds ...gen.Condition) IExchangeGiftDo
	Or(conds ...gen.Condition) IExchangeGiftDo
	Select(conds ...field.Expr) IExchangeGiftDo
	Where(conds ...gen.Condition) IExchangeGiftDo
	Order(conds ...field.Expr) IExchangeGiftDo
	Distinct(cols ...field.Expr) IExchangeGiftDo
	Omit(cols ...field.Expr) IExchangeGiftDo
	Join(table schema.Tabler, on ...field.Expr) IExchangeGiftDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IExchangeGiftDo
	RightJoin(table schema.Tabler, on ...field.Expr) IExchangeGiftDo
	Group(cols ...field.Expr) IExchangeGiftDo
	Having(conds ...gen.Condition) IExchangeGiftDo
	Limit(limit int) IExchangeGiftDo
	Offset(offset int) IExchangeGiftDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IExchangeGiftDo
	Unscoped() IExchangeGiftDo
	Create(values ...*model.ExchangeGift) error
	CreateInBatches(values []*model.ExchangeGift, batchSize int) error
	Save(values ...*model.ExchangeGift) error
	First() (*model.ExchangeGift, error)
	Take() (*model.ExchangeGift, error)
	Last() (*model.ExchangeGift, error)
	Find() ([]*model.ExchangeGift, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExchangeGift, err error)
	FindInBatches(result *[]*model.ExchangeGift, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ExchangeGift) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IExchangeGiftDo
	Assign(attrs ...field.AssignExpr) IExchangeGiftDo
	Joins(fields ...field.RelationField) IExchangeGiftDo
	Preload(fields ...field.RelationField) IExchangeGiftDo
	FirstOrInit() (*model.ExchangeGift, error)
	FirstOrCreate() (*model.ExchangeGift, error)
	FindByPage(offset int, limit int) (result []*model.ExchangeGift, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IExchangeGiftDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e exchangeGiftDo) Debug() IExchangeGiftDo {
	return e.withDO(e.DO.Debug())
}

func (e exchangeGiftDo) WithContext(ctx context.Context) IExchangeGiftDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e exchangeGiftDo) ReadDB() IExchangeGiftDo {
	return e.Clauses(dbresolver.Read)
}

func (e exchangeGiftDo) WriteDB() IExchangeGiftDo {
	return e.Clauses(dbresolver.Write)
}

func (e exchangeGiftDo) Session(config *gorm.Session) IExchangeGiftDo {
	return e.withDO(e.DO.Session(config))
}

func (e exchangeGiftDo) Clauses(conds ...clause.Expression) IExchangeGiftDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e exchangeGiftDo) Returning(value interface{}, columns ...string) IExchangeGiftDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e exchangeGiftDo) Not(conds ...gen.Condition) IExchangeGiftDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e exchangeGiftDo) Or(conds ...gen.Condition) IExchangeGiftDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e exchangeGiftDo) Select(conds ...field.Expr) IExchangeGiftDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e exchangeGiftDo) Where(conds ...gen.Condition) IExchangeGiftDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e exchangeGiftDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IExchangeGiftDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e exchangeGiftDo) Order(conds ...field.Expr) IExchangeGiftDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e exchangeGiftDo) Distinct(cols ...field.Expr) IExchangeGiftDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e exchangeGiftDo) Omit(cols ...field.Expr) IExchangeGiftDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e exchangeGiftDo) Join(table schema.Tabler, on ...field.Expr) IExchangeGiftDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e exchangeGiftDo) LeftJoin(table schema.Tabler, on ...field.Expr) IExchangeGiftDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e exchangeGiftDo) RightJoin(table schema.Tabler, on ...field.Expr) IExchangeGiftDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e exchangeGiftDo) Group(cols ...field.Expr) IExchangeGiftDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e exchangeGiftDo) Having(conds ...gen.Condition) IExchangeGiftDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e exchangeGiftDo) Limit(limit int) IExchangeGiftDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e exchangeGiftDo) Offset(offset int) IExchangeGiftDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e exchangeGiftDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IExchangeGiftDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e exchangeGiftDo) Unscoped() IExchangeGiftDo {
	return e.withDO(e.DO.Unscoped())
}

func (e exchangeGiftDo) Create(values ...*model.ExchangeGift) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e exchangeGiftDo) CreateInBatches(values []*model.ExchangeGift, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e exchangeGiftDo) Save(values ...*model.ExchangeGift) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e exchangeGiftDo) First() (*model.ExchangeGift, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExchangeGift), nil
	}
}

func (e exchangeGiftDo) Take() (*model.ExchangeGift, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExchangeGift), nil
	}
}

func (e exchangeGiftDo) Last() (*model.ExchangeGift, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExchangeGift), nil
	}
}

func (e exchangeGiftDo) Find() ([]*model.ExchangeGift, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExchangeGift), err
}

func (e exchangeGiftDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExchangeGift, err error) {
	buf := make([]*model.ExchangeGift, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e exchangeGiftDo) FindInBatches(result *[]*model.ExchangeGift, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e exchangeGiftDo) Attrs(attrs ...field.AssignExpr) IExchangeGiftDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e exchangeGiftDo) Assign(attrs ...field.AssignExpr) IExchangeGiftDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e exchangeGiftDo) Joins(fields ...field.RelationField) IExchangeGiftDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e exchangeGiftDo) Preload(fields ...field.RelationField) IExchangeGiftDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e exchangeGiftDo) FirstOrInit() (*model.ExchangeGift, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExchangeGift), nil
	}
}

func (e exchangeGiftDo) FirstOrCreate() (*model.ExchangeGift, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExchangeGift), nil
	}
}

func (e exchangeGiftDo) FindByPage(offset int, limit int) (result []*model.ExchangeGift, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e exchangeGiftDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e exchangeGiftDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e exchangeGiftDo) Delete(models ...*model.ExchangeGift) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *exchangeGiftDo) withDO(do gen.Dao) *exchangeGiftDo {
	e.DO = *do.(*gen.DO)
	return e
}
