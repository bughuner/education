// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"education/model"
)

func newNpcTask(db *gorm.DB, opts ...gen.DOOption) npcTask {
	_npcTask := npcTask{}

	_npcTask.npcTaskDo.UseDB(db, opts...)
	_npcTask.npcTaskDo.UseModel(&model.NpcTask{})

	tableName := _npcTask.npcTaskDo.TableName()
	_npcTask.ALL = field.NewAsterisk(tableName)
	_npcTask.ID = field.NewString(tableName, "id")
	_npcTask.NpcID = field.NewString(tableName, "npc_id")
	_npcTask.TaskID = field.NewString(tableName, "task_id")

	_npcTask.fillFieldMap()

	return _npcTask
}

type npcTask struct {
	npcTaskDo npcTaskDo

	ALL    field.Asterisk
	ID     field.String // npc持有任务id
	NpcID  field.String // npc id
	TaskID field.String // 任务id

	fieldMap map[string]field.Expr
}

func (n npcTask) Table(newTableName string) *npcTask {
	n.npcTaskDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n npcTask) As(alias string) *npcTask {
	n.npcTaskDo.DO = *(n.npcTaskDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *npcTask) updateTableName(table string) *npcTask {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewString(table, "id")
	n.NpcID = field.NewString(table, "npc_id")
	n.TaskID = field.NewString(table, "task_id")

	n.fillFieldMap()

	return n
}

func (n *npcTask) WithContext(ctx context.Context) INpcTaskDo { return n.npcTaskDo.WithContext(ctx) }

func (n npcTask) TableName() string { return n.npcTaskDo.TableName() }

func (n npcTask) Alias() string { return n.npcTaskDo.Alias() }

func (n *npcTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *npcTask) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 3)
	n.fieldMap["id"] = n.ID
	n.fieldMap["npc_id"] = n.NpcID
	n.fieldMap["task_id"] = n.TaskID
}

func (n npcTask) clone(db *gorm.DB) npcTask {
	n.npcTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n npcTask) replaceDB(db *gorm.DB) npcTask {
	n.npcTaskDo.ReplaceDB(db)
	return n
}

type npcTaskDo struct{ gen.DO }

type INpcTaskDo interface {
	gen.SubQuery
	Debug() INpcTaskDo
	WithContext(ctx context.Context) INpcTaskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INpcTaskDo
	WriteDB() INpcTaskDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INpcTaskDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INpcTaskDo
	Not(conds ...gen.Condition) INpcTaskDo
	Or(conds ...gen.Condition) INpcTaskDo
	Select(conds ...field.Expr) INpcTaskDo
	Where(conds ...gen.Condition) INpcTaskDo
	Order(conds ...field.Expr) INpcTaskDo
	Distinct(cols ...field.Expr) INpcTaskDo
	Omit(cols ...field.Expr) INpcTaskDo
	Join(table schema.Tabler, on ...field.Expr) INpcTaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INpcTaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) INpcTaskDo
	Group(cols ...field.Expr) INpcTaskDo
	Having(conds ...gen.Condition) INpcTaskDo
	Limit(limit int) INpcTaskDo
	Offset(offset int) INpcTaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INpcTaskDo
	Unscoped() INpcTaskDo
	Create(values ...*model.NpcTask) error
	CreateInBatches(values []*model.NpcTask, batchSize int) error
	Save(values ...*model.NpcTask) error
	First() (*model.NpcTask, error)
	Take() (*model.NpcTask, error)
	Last() (*model.NpcTask, error)
	Find() ([]*model.NpcTask, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NpcTask, err error)
	FindInBatches(result *[]*model.NpcTask, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NpcTask) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INpcTaskDo
	Assign(attrs ...field.AssignExpr) INpcTaskDo
	Joins(fields ...field.RelationField) INpcTaskDo
	Preload(fields ...field.RelationField) INpcTaskDo
	FirstOrInit() (*model.NpcTask, error)
	FirstOrCreate() (*model.NpcTask, error)
	FindByPage(offset int, limit int) (result []*model.NpcTask, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INpcTaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n npcTaskDo) Debug() INpcTaskDo {
	return n.withDO(n.DO.Debug())
}

func (n npcTaskDo) WithContext(ctx context.Context) INpcTaskDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n npcTaskDo) ReadDB() INpcTaskDo {
	return n.Clauses(dbresolver.Read)
}

func (n npcTaskDo) WriteDB() INpcTaskDo {
	return n.Clauses(dbresolver.Write)
}

func (n npcTaskDo) Session(config *gorm.Session) INpcTaskDo {
	return n.withDO(n.DO.Session(config))
}

func (n npcTaskDo) Clauses(conds ...clause.Expression) INpcTaskDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n npcTaskDo) Returning(value interface{}, columns ...string) INpcTaskDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n npcTaskDo) Not(conds ...gen.Condition) INpcTaskDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n npcTaskDo) Or(conds ...gen.Condition) INpcTaskDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n npcTaskDo) Select(conds ...field.Expr) INpcTaskDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n npcTaskDo) Where(conds ...gen.Condition) INpcTaskDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n npcTaskDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) INpcTaskDo {
	return n.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (n npcTaskDo) Order(conds ...field.Expr) INpcTaskDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n npcTaskDo) Distinct(cols ...field.Expr) INpcTaskDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n npcTaskDo) Omit(cols ...field.Expr) INpcTaskDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n npcTaskDo) Join(table schema.Tabler, on ...field.Expr) INpcTaskDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n npcTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) INpcTaskDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n npcTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) INpcTaskDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n npcTaskDo) Group(cols ...field.Expr) INpcTaskDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n npcTaskDo) Having(conds ...gen.Condition) INpcTaskDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n npcTaskDo) Limit(limit int) INpcTaskDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n npcTaskDo) Offset(offset int) INpcTaskDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n npcTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INpcTaskDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n npcTaskDo) Unscoped() INpcTaskDo {
	return n.withDO(n.DO.Unscoped())
}

func (n npcTaskDo) Create(values ...*model.NpcTask) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n npcTaskDo) CreateInBatches(values []*model.NpcTask, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n npcTaskDo) Save(values ...*model.NpcTask) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n npcTaskDo) First() (*model.NpcTask, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NpcTask), nil
	}
}

func (n npcTaskDo) Take() (*model.NpcTask, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NpcTask), nil
	}
}

func (n npcTaskDo) Last() (*model.NpcTask, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NpcTask), nil
	}
}

func (n npcTaskDo) Find() ([]*model.NpcTask, error) {
	result, err := n.DO.Find()
	return result.([]*model.NpcTask), err
}

func (n npcTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NpcTask, err error) {
	buf := make([]*model.NpcTask, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n npcTaskDo) FindInBatches(result *[]*model.NpcTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n npcTaskDo) Attrs(attrs ...field.AssignExpr) INpcTaskDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n npcTaskDo) Assign(attrs ...field.AssignExpr) INpcTaskDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n npcTaskDo) Joins(fields ...field.RelationField) INpcTaskDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n npcTaskDo) Preload(fields ...field.RelationField) INpcTaskDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n npcTaskDo) FirstOrInit() (*model.NpcTask, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NpcTask), nil
	}
}

func (n npcTaskDo) FirstOrCreate() (*model.NpcTask, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NpcTask), nil
	}
}

func (n npcTaskDo) FindByPage(offset int, limit int) (result []*model.NpcTask, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n npcTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n npcTaskDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n npcTaskDo) Delete(models ...*model.NpcTask) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *npcTaskDo) withDO(do gen.Dao) *npcTaskDo {
	n.DO = *do.(*gen.DO)
	return n
}
