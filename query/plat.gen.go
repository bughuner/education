// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"education/model"
)

func newPlat(db *gorm.DB, opts ...gen.DOOption) plat {
	_plat := plat{}

	_plat.platDo.UseDB(db, opts...)
	_plat.platDo.UseModel(&model.Plat{})

	tableName := _plat.platDo.TableName()
	_plat.ALL = field.NewAsterisk(tableName)
	_plat.ID = field.NewString(tableName, "id")
	_plat.Name = field.NewString(tableName, "name")
	_plat.Image = field.NewString(tableName, "image")
	_plat.Width = field.NewInt64(tableName, "width")
	_plat.Height = field.NewInt64(tableName, "height")

	_plat.fillFieldMap()

	return _plat
}

type plat struct {
	platDo platDo

	ALL    field.Asterisk
	ID     field.String
	Name   field.String // 名称
	Image  field.String // 图片
	Width  field.Int64  // 宽
	Height field.Int64  // 高

	fieldMap map[string]field.Expr
}

func (p plat) Table(newTableName string) *plat {
	p.platDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p plat) As(alias string) *plat {
	p.platDo.DO = *(p.platDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *plat) updateTableName(table string) *plat {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.Name = field.NewString(table, "name")
	p.Image = field.NewString(table, "image")
	p.Width = field.NewInt64(table, "width")
	p.Height = field.NewInt64(table, "height")

	p.fillFieldMap()

	return p
}

func (p *plat) WithContext(ctx context.Context) IPlatDo { return p.platDo.WithContext(ctx) }

func (p plat) TableName() string { return p.platDo.TableName() }

func (p plat) Alias() string { return p.platDo.Alias() }

func (p *plat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *plat) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["image"] = p.Image
	p.fieldMap["width"] = p.Width
	p.fieldMap["height"] = p.Height
}

func (p plat) clone(db *gorm.DB) plat {
	p.platDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p plat) replaceDB(db *gorm.DB) plat {
	p.platDo.ReplaceDB(db)
	return p
}

type platDo struct{ gen.DO }

type IPlatDo interface {
	gen.SubQuery
	Debug() IPlatDo
	WithContext(ctx context.Context) IPlatDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPlatDo
	WriteDB() IPlatDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPlatDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPlatDo
	Not(conds ...gen.Condition) IPlatDo
	Or(conds ...gen.Condition) IPlatDo
	Select(conds ...field.Expr) IPlatDo
	Where(conds ...gen.Condition) IPlatDo
	Order(conds ...field.Expr) IPlatDo
	Distinct(cols ...field.Expr) IPlatDo
	Omit(cols ...field.Expr) IPlatDo
	Join(table schema.Tabler, on ...field.Expr) IPlatDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPlatDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPlatDo
	Group(cols ...field.Expr) IPlatDo
	Having(conds ...gen.Condition) IPlatDo
	Limit(limit int) IPlatDo
	Offset(offset int) IPlatDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPlatDo
	Unscoped() IPlatDo
	Create(values ...*model.Plat) error
	CreateInBatches(values []*model.Plat, batchSize int) error
	Save(values ...*model.Plat) error
	First() (*model.Plat, error)
	Take() (*model.Plat, error)
	Last() (*model.Plat, error)
	Find() ([]*model.Plat, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Plat, err error)
	FindInBatches(result *[]*model.Plat, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Plat) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPlatDo
	Assign(attrs ...field.AssignExpr) IPlatDo
	Joins(fields ...field.RelationField) IPlatDo
	Preload(fields ...field.RelationField) IPlatDo
	FirstOrInit() (*model.Plat, error)
	FirstOrCreate() (*model.Plat, error)
	FindByPage(offset int, limit int) (result []*model.Plat, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPlatDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p platDo) Debug() IPlatDo {
	return p.withDO(p.DO.Debug())
}

func (p platDo) WithContext(ctx context.Context) IPlatDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p platDo) ReadDB() IPlatDo {
	return p.Clauses(dbresolver.Read)
}

func (p platDo) WriteDB() IPlatDo {
	return p.Clauses(dbresolver.Write)
}

func (p platDo) Session(config *gorm.Session) IPlatDo {
	return p.withDO(p.DO.Session(config))
}

func (p platDo) Clauses(conds ...clause.Expression) IPlatDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p platDo) Returning(value interface{}, columns ...string) IPlatDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p platDo) Not(conds ...gen.Condition) IPlatDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p platDo) Or(conds ...gen.Condition) IPlatDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p platDo) Select(conds ...field.Expr) IPlatDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p platDo) Where(conds ...gen.Condition) IPlatDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p platDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPlatDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p platDo) Order(conds ...field.Expr) IPlatDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p platDo) Distinct(cols ...field.Expr) IPlatDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p platDo) Omit(cols ...field.Expr) IPlatDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p platDo) Join(table schema.Tabler, on ...field.Expr) IPlatDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p platDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPlatDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p platDo) RightJoin(table schema.Tabler, on ...field.Expr) IPlatDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p platDo) Group(cols ...field.Expr) IPlatDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p platDo) Having(conds ...gen.Condition) IPlatDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p platDo) Limit(limit int) IPlatDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p platDo) Offset(offset int) IPlatDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p platDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPlatDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p platDo) Unscoped() IPlatDo {
	return p.withDO(p.DO.Unscoped())
}

func (p platDo) Create(values ...*model.Plat) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p platDo) CreateInBatches(values []*model.Plat, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p platDo) Save(values ...*model.Plat) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p platDo) First() (*model.Plat, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Plat), nil
	}
}

func (p platDo) Take() (*model.Plat, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Plat), nil
	}
}

func (p platDo) Last() (*model.Plat, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Plat), nil
	}
}

func (p platDo) Find() ([]*model.Plat, error) {
	result, err := p.DO.Find()
	return result.([]*model.Plat), err
}

func (p platDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Plat, err error) {
	buf := make([]*model.Plat, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p platDo) FindInBatches(result *[]*model.Plat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p platDo) Attrs(attrs ...field.AssignExpr) IPlatDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p platDo) Assign(attrs ...field.AssignExpr) IPlatDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p platDo) Joins(fields ...field.RelationField) IPlatDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p platDo) Preload(fields ...field.RelationField) IPlatDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p platDo) FirstOrInit() (*model.Plat, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Plat), nil
	}
}

func (p platDo) FirstOrCreate() (*model.Plat, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Plat), nil
	}
}

func (p platDo) FindByPage(offset int, limit int) (result []*model.Plat, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p platDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p platDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p platDo) Delete(models ...*model.Plat) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *platDo) withDO(do gen.Dao) *platDo {
	p.DO = *do.(*gen.DO)
	return p
}
