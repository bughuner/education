// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"education/model"
)

func newMonster(db *gorm.DB, opts ...gen.DOOption) monster {
	_monster := monster{}

	_monster.monsterDo.UseDB(db, opts...)
	_monster.monsterDo.UseModel(&model.Monster{})

	tableName := _monster.monsterDo.TableName()
	_monster.ALL = field.NewAsterisk(tableName)
	_monster.ID = field.NewString(tableName, "id")
	_monster.Type = field.NewInt64(tableName, "type")
	_monster.Name = field.NewString(tableName, "name")
	_monster.Level = field.NewInt64(tableName, "level")
	_monster.ExperienceValue = field.NewInt64(tableName, "experience_value")
	_monster.Coin = field.NewInt64(tableName, "coin")
	_monster.Hp = field.NewInt64(tableName, "hp")
	_monster.Image = field.NewString(tableName, "image")

	_monster.fillFieldMap()

	return _monster
}

type monster struct {
	monsterDo monsterDo

	ALL             field.Asterisk
	ID              field.String // 怪物的id
	Type            field.Int64  // 类型
	Name            field.String // 名称
	Level           field.Int64  // 等级
	ExperienceValue field.Int64  // 经验值
	Coin            field.Int64  // 金币
	Hp              field.Int64  // 生命值
	Image           field.String // 头像

	fieldMap map[string]field.Expr
}

func (m monster) Table(newTableName string) *monster {
	m.monsterDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m monster) As(alias string) *monster {
	m.monsterDo.DO = *(m.monsterDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *monster) updateTableName(table string) *monster {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewString(table, "id")
	m.Type = field.NewInt64(table, "type")
	m.Name = field.NewString(table, "name")
	m.Level = field.NewInt64(table, "level")
	m.ExperienceValue = field.NewInt64(table, "experience_value")
	m.Coin = field.NewInt64(table, "coin")
	m.Hp = field.NewInt64(table, "hp")
	m.Image = field.NewString(table, "image")

	m.fillFieldMap()

	return m
}

func (m *monster) WithContext(ctx context.Context) IMonsterDo { return m.monsterDo.WithContext(ctx) }

func (m monster) TableName() string { return m.monsterDo.TableName() }

func (m monster) Alias() string { return m.monsterDo.Alias() }

func (m *monster) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *monster) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["id"] = m.ID
	m.fieldMap["type"] = m.Type
	m.fieldMap["name"] = m.Name
	m.fieldMap["level"] = m.Level
	m.fieldMap["experience_value"] = m.ExperienceValue
	m.fieldMap["coin"] = m.Coin
	m.fieldMap["hp"] = m.Hp
	m.fieldMap["image"] = m.Image
}

func (m monster) clone(db *gorm.DB) monster {
	m.monsterDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m monster) replaceDB(db *gorm.DB) monster {
	m.monsterDo.ReplaceDB(db)
	return m
}

type monsterDo struct{ gen.DO }

type IMonsterDo interface {
	gen.SubQuery
	Debug() IMonsterDo
	WithContext(ctx context.Context) IMonsterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMonsterDo
	WriteDB() IMonsterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMonsterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMonsterDo
	Not(conds ...gen.Condition) IMonsterDo
	Or(conds ...gen.Condition) IMonsterDo
	Select(conds ...field.Expr) IMonsterDo
	Where(conds ...gen.Condition) IMonsterDo
	Order(conds ...field.Expr) IMonsterDo
	Distinct(cols ...field.Expr) IMonsterDo
	Omit(cols ...field.Expr) IMonsterDo
	Join(table schema.Tabler, on ...field.Expr) IMonsterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMonsterDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMonsterDo
	Group(cols ...field.Expr) IMonsterDo
	Having(conds ...gen.Condition) IMonsterDo
	Limit(limit int) IMonsterDo
	Offset(offset int) IMonsterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMonsterDo
	Unscoped() IMonsterDo
	Create(values ...*model.Monster) error
	CreateInBatches(values []*model.Monster, batchSize int) error
	Save(values ...*model.Monster) error
	First() (*model.Monster, error)
	Take() (*model.Monster, error)
	Last() (*model.Monster, error)
	Find() ([]*model.Monster, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Monster, err error)
	FindInBatches(result *[]*model.Monster, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Monster) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMonsterDo
	Assign(attrs ...field.AssignExpr) IMonsterDo
	Joins(fields ...field.RelationField) IMonsterDo
	Preload(fields ...field.RelationField) IMonsterDo
	FirstOrInit() (*model.Monster, error)
	FirstOrCreate() (*model.Monster, error)
	FindByPage(offset int, limit int) (result []*model.Monster, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMonsterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m monsterDo) Debug() IMonsterDo {
	return m.withDO(m.DO.Debug())
}

func (m monsterDo) WithContext(ctx context.Context) IMonsterDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m monsterDo) ReadDB() IMonsterDo {
	return m.Clauses(dbresolver.Read)
}

func (m monsterDo) WriteDB() IMonsterDo {
	return m.Clauses(dbresolver.Write)
}

func (m monsterDo) Session(config *gorm.Session) IMonsterDo {
	return m.withDO(m.DO.Session(config))
}

func (m monsterDo) Clauses(conds ...clause.Expression) IMonsterDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m monsterDo) Returning(value interface{}, columns ...string) IMonsterDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m monsterDo) Not(conds ...gen.Condition) IMonsterDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m monsterDo) Or(conds ...gen.Condition) IMonsterDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m monsterDo) Select(conds ...field.Expr) IMonsterDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m monsterDo) Where(conds ...gen.Condition) IMonsterDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m monsterDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMonsterDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m monsterDo) Order(conds ...field.Expr) IMonsterDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m monsterDo) Distinct(cols ...field.Expr) IMonsterDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m monsterDo) Omit(cols ...field.Expr) IMonsterDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m monsterDo) Join(table schema.Tabler, on ...field.Expr) IMonsterDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m monsterDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMonsterDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m monsterDo) RightJoin(table schema.Tabler, on ...field.Expr) IMonsterDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m monsterDo) Group(cols ...field.Expr) IMonsterDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m monsterDo) Having(conds ...gen.Condition) IMonsterDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m monsterDo) Limit(limit int) IMonsterDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m monsterDo) Offset(offset int) IMonsterDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m monsterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMonsterDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m monsterDo) Unscoped() IMonsterDo {
	return m.withDO(m.DO.Unscoped())
}

func (m monsterDo) Create(values ...*model.Monster) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m monsterDo) CreateInBatches(values []*model.Monster, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m monsterDo) Save(values ...*model.Monster) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m monsterDo) First() (*model.Monster, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Monster), nil
	}
}

func (m monsterDo) Take() (*model.Monster, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Monster), nil
	}
}

func (m monsterDo) Last() (*model.Monster, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Monster), nil
	}
}

func (m monsterDo) Find() ([]*model.Monster, error) {
	result, err := m.DO.Find()
	return result.([]*model.Monster), err
}

func (m monsterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Monster, err error) {
	buf := make([]*model.Monster, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m monsterDo) FindInBatches(result *[]*model.Monster, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m monsterDo) Attrs(attrs ...field.AssignExpr) IMonsterDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m monsterDo) Assign(attrs ...field.AssignExpr) IMonsterDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m monsterDo) Joins(fields ...field.RelationField) IMonsterDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m monsterDo) Preload(fields ...field.RelationField) IMonsterDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m monsterDo) FirstOrInit() (*model.Monster, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Monster), nil
	}
}

func (m monsterDo) FirstOrCreate() (*model.Monster, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Monster), nil
	}
}

func (m monsterDo) FindByPage(offset int, limit int) (result []*model.Monster, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m monsterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m monsterDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m monsterDo) Delete(models ...*model.Monster) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *monsterDo) withDO(do gen.Dao) *monsterDo {
	m.DO = *do.(*gen.DO)
	return m
}
