// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"education/model"
)

func newQuestionSelect(db *gorm.DB, opts ...gen.DOOption) questionSelect {
	_questionSelect := questionSelect{}

	_questionSelect.questionSelectDo.UseDB(db, opts...)
	_questionSelect.questionSelectDo.UseModel(&model.QuestionSelect{})

	tableName := _questionSelect.questionSelectDo.TableName()
	_questionSelect.ALL = field.NewAsterisk(tableName)
	_questionSelect.ID = field.NewString(tableName, "id")
	_questionSelect.QuestionID = field.NewString(tableName, "question_id")
	_questionSelect.Content = field.NewString(tableName, "content")

	_questionSelect.fillFieldMap()

	return _questionSelect
}

type questionSelect struct {
	questionSelectDo questionSelectDo

	ALL        field.Asterisk
	ID         field.String // id
	QuestionID field.String // 问题id
	Content    field.String // 选项内容

	fieldMap map[string]field.Expr
}

func (q questionSelect) Table(newTableName string) *questionSelect {
	q.questionSelectDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q questionSelect) As(alias string) *questionSelect {
	q.questionSelectDo.DO = *(q.questionSelectDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *questionSelect) updateTableName(table string) *questionSelect {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewString(table, "id")
	q.QuestionID = field.NewString(table, "question_id")
	q.Content = field.NewString(table, "content")

	q.fillFieldMap()

	return q
}

func (q *questionSelect) WithContext(ctx context.Context) IQuestionSelectDo {
	return q.questionSelectDo.WithContext(ctx)
}

func (q questionSelect) TableName() string { return q.questionSelectDo.TableName() }

func (q questionSelect) Alias() string { return q.questionSelectDo.Alias() }

func (q *questionSelect) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *questionSelect) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 3)
	q.fieldMap["id"] = q.ID
	q.fieldMap["question_id"] = q.QuestionID
	q.fieldMap["content"] = q.Content
}

func (q questionSelect) clone(db *gorm.DB) questionSelect {
	q.questionSelectDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q questionSelect) replaceDB(db *gorm.DB) questionSelect {
	q.questionSelectDo.ReplaceDB(db)
	return q
}

type questionSelectDo struct{ gen.DO }

type IQuestionSelectDo interface {
	gen.SubQuery
	Debug() IQuestionSelectDo
	WithContext(ctx context.Context) IQuestionSelectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQuestionSelectDo
	WriteDB() IQuestionSelectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQuestionSelectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQuestionSelectDo
	Not(conds ...gen.Condition) IQuestionSelectDo
	Or(conds ...gen.Condition) IQuestionSelectDo
	Select(conds ...field.Expr) IQuestionSelectDo
	Where(conds ...gen.Condition) IQuestionSelectDo
	Order(conds ...field.Expr) IQuestionSelectDo
	Distinct(cols ...field.Expr) IQuestionSelectDo
	Omit(cols ...field.Expr) IQuestionSelectDo
	Join(table schema.Tabler, on ...field.Expr) IQuestionSelectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQuestionSelectDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQuestionSelectDo
	Group(cols ...field.Expr) IQuestionSelectDo
	Having(conds ...gen.Condition) IQuestionSelectDo
	Limit(limit int) IQuestionSelectDo
	Offset(offset int) IQuestionSelectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQuestionSelectDo
	Unscoped() IQuestionSelectDo
	Create(values ...*model.QuestionSelect) error
	CreateInBatches(values []*model.QuestionSelect, batchSize int) error
	Save(values ...*model.QuestionSelect) error
	First() (*model.QuestionSelect, error)
	Take() (*model.QuestionSelect, error)
	Last() (*model.QuestionSelect, error)
	Find() ([]*model.QuestionSelect, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuestionSelect, err error)
	FindInBatches(result *[]*model.QuestionSelect, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QuestionSelect) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQuestionSelectDo
	Assign(attrs ...field.AssignExpr) IQuestionSelectDo
	Joins(fields ...field.RelationField) IQuestionSelectDo
	Preload(fields ...field.RelationField) IQuestionSelectDo
	FirstOrInit() (*model.QuestionSelect, error)
	FirstOrCreate() (*model.QuestionSelect, error)
	FindByPage(offset int, limit int) (result []*model.QuestionSelect, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQuestionSelectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q questionSelectDo) Debug() IQuestionSelectDo {
	return q.withDO(q.DO.Debug())
}

func (q questionSelectDo) WithContext(ctx context.Context) IQuestionSelectDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q questionSelectDo) ReadDB() IQuestionSelectDo {
	return q.Clauses(dbresolver.Read)
}

func (q questionSelectDo) WriteDB() IQuestionSelectDo {
	return q.Clauses(dbresolver.Write)
}

func (q questionSelectDo) Session(config *gorm.Session) IQuestionSelectDo {
	return q.withDO(q.DO.Session(config))
}

func (q questionSelectDo) Clauses(conds ...clause.Expression) IQuestionSelectDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q questionSelectDo) Returning(value interface{}, columns ...string) IQuestionSelectDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q questionSelectDo) Not(conds ...gen.Condition) IQuestionSelectDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q questionSelectDo) Or(conds ...gen.Condition) IQuestionSelectDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q questionSelectDo) Select(conds ...field.Expr) IQuestionSelectDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q questionSelectDo) Where(conds ...gen.Condition) IQuestionSelectDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q questionSelectDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IQuestionSelectDo {
	return q.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (q questionSelectDo) Order(conds ...field.Expr) IQuestionSelectDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q questionSelectDo) Distinct(cols ...field.Expr) IQuestionSelectDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q questionSelectDo) Omit(cols ...field.Expr) IQuestionSelectDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q questionSelectDo) Join(table schema.Tabler, on ...field.Expr) IQuestionSelectDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q questionSelectDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQuestionSelectDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q questionSelectDo) RightJoin(table schema.Tabler, on ...field.Expr) IQuestionSelectDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q questionSelectDo) Group(cols ...field.Expr) IQuestionSelectDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q questionSelectDo) Having(conds ...gen.Condition) IQuestionSelectDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q questionSelectDo) Limit(limit int) IQuestionSelectDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q questionSelectDo) Offset(offset int) IQuestionSelectDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q questionSelectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQuestionSelectDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q questionSelectDo) Unscoped() IQuestionSelectDo {
	return q.withDO(q.DO.Unscoped())
}

func (q questionSelectDo) Create(values ...*model.QuestionSelect) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q questionSelectDo) CreateInBatches(values []*model.QuestionSelect, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q questionSelectDo) Save(values ...*model.QuestionSelect) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q questionSelectDo) First() (*model.QuestionSelect, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionSelect), nil
	}
}

func (q questionSelectDo) Take() (*model.QuestionSelect, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionSelect), nil
	}
}

func (q questionSelectDo) Last() (*model.QuestionSelect, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionSelect), nil
	}
}

func (q questionSelectDo) Find() ([]*model.QuestionSelect, error) {
	result, err := q.DO.Find()
	return result.([]*model.QuestionSelect), err
}

func (q questionSelectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuestionSelect, err error) {
	buf := make([]*model.QuestionSelect, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q questionSelectDo) FindInBatches(result *[]*model.QuestionSelect, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q questionSelectDo) Attrs(attrs ...field.AssignExpr) IQuestionSelectDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q questionSelectDo) Assign(attrs ...field.AssignExpr) IQuestionSelectDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q questionSelectDo) Joins(fields ...field.RelationField) IQuestionSelectDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q questionSelectDo) Preload(fields ...field.RelationField) IQuestionSelectDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q questionSelectDo) FirstOrInit() (*model.QuestionSelect, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionSelect), nil
	}
}

func (q questionSelectDo) FirstOrCreate() (*model.QuestionSelect, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionSelect), nil
	}
}

func (q questionSelectDo) FindByPage(offset int, limit int) (result []*model.QuestionSelect, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q questionSelectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q questionSelectDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q questionSelectDo) Delete(models ...*model.QuestionSelect) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *questionSelectDo) withDO(do gen.Dao) *questionSelectDo {
	q.DO = *do.(*gen.DO)
	return q
}
