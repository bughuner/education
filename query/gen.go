// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q               = new(Query)
	Doc             *doc
	DocQuestion     *docQuestion
	ExchangeGift    *exchangeGift
	Form            *form
	Gift            *gift
	Monster         *monster
	MonsterQuestion *monsterQuestion
	Npc             *npc
	NpcTask         *npcTask
	Question        *question
	QuestionAnswer  *questionAnswer
	QuestionSelect  *questionSelect
	Shop            *shop
	Task            *task
	User            *user
	UserQuestion    *userQuestion
	UserTask        *userTask
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Doc = &Q.Doc
	DocQuestion = &Q.DocQuestion
	ExchangeGift = &Q.ExchangeGift
	Form = &Q.Form
	Gift = &Q.Gift
	Monster = &Q.Monster
	MonsterQuestion = &Q.MonsterQuestion
	Npc = &Q.Npc
	NpcTask = &Q.NpcTask
	Question = &Q.Question
	QuestionAnswer = &Q.QuestionAnswer
	QuestionSelect = &Q.QuestionSelect
	Shop = &Q.Shop
	Task = &Q.Task
	User = &Q.User
	UserQuestion = &Q.UserQuestion
	UserTask = &Q.UserTask
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:              db,
		Doc:             newDoc(db, opts...),
		DocQuestion:     newDocQuestion(db, opts...),
		ExchangeGift:    newExchangeGift(db, opts...),
		Form:            newForm(db, opts...),
		Gift:            newGift(db, opts...),
		Monster:         newMonster(db, opts...),
		MonsterQuestion: newMonsterQuestion(db, opts...),
		Npc:             newNpc(db, opts...),
		NpcTask:         newNpcTask(db, opts...),
		Question:        newQuestion(db, opts...),
		QuestionAnswer:  newQuestionAnswer(db, opts...),
		QuestionSelect:  newQuestionSelect(db, opts...),
		Shop:            newShop(db, opts...),
		Task:            newTask(db, opts...),
		User:            newUser(db, opts...),
		UserQuestion:    newUserQuestion(db, opts...),
		UserTask:        newUserTask(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Doc             doc
	DocQuestion     docQuestion
	ExchangeGift    exchangeGift
	Form            form
	Gift            gift
	Monster         monster
	MonsterQuestion monsterQuestion
	Npc             npc
	NpcTask         npcTask
	Question        question
	QuestionAnswer  questionAnswer
	QuestionSelect  questionSelect
	Shop            shop
	Task            task
	User            user
	UserQuestion    userQuestion
	UserTask        userTask
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Doc:             q.Doc.clone(db),
		DocQuestion:     q.DocQuestion.clone(db),
		ExchangeGift:    q.ExchangeGift.clone(db),
		Form:            q.Form.clone(db),
		Gift:            q.Gift.clone(db),
		Monster:         q.Monster.clone(db),
		MonsterQuestion: q.MonsterQuestion.clone(db),
		Npc:             q.Npc.clone(db),
		NpcTask:         q.NpcTask.clone(db),
		Question:        q.Question.clone(db),
		QuestionAnswer:  q.QuestionAnswer.clone(db),
		QuestionSelect:  q.QuestionSelect.clone(db),
		Shop:            q.Shop.clone(db),
		Task:            q.Task.clone(db),
		User:            q.User.clone(db),
		UserQuestion:    q.UserQuestion.clone(db),
		UserTask:        q.UserTask.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Doc:             q.Doc.replaceDB(db),
		DocQuestion:     q.DocQuestion.replaceDB(db),
		ExchangeGift:    q.ExchangeGift.replaceDB(db),
		Form:            q.Form.replaceDB(db),
		Gift:            q.Gift.replaceDB(db),
		Monster:         q.Monster.replaceDB(db),
		MonsterQuestion: q.MonsterQuestion.replaceDB(db),
		Npc:             q.Npc.replaceDB(db),
		NpcTask:         q.NpcTask.replaceDB(db),
		Question:        q.Question.replaceDB(db),
		QuestionAnswer:  q.QuestionAnswer.replaceDB(db),
		QuestionSelect:  q.QuestionSelect.replaceDB(db),
		Shop:            q.Shop.replaceDB(db),
		Task:            q.Task.replaceDB(db),
		User:            q.User.replaceDB(db),
		UserQuestion:    q.UserQuestion.replaceDB(db),
		UserTask:        q.UserTask.replaceDB(db),
	}
}

type queryCtx struct {
	Doc             IDocDo
	DocQuestion     IDocQuestionDo
	ExchangeGift    IExchangeGiftDo
	Form            IFormDo
	Gift            IGiftDo
	Monster         IMonsterDo
	MonsterQuestion IMonsterQuestionDo
	Npc             INpcDo
	NpcTask         INpcTaskDo
	Question        IQuestionDo
	QuestionAnswer  IQuestionAnswerDo
	QuestionSelect  IQuestionSelectDo
	Shop            IShopDo
	Task            ITaskDo
	User            IUserDo
	UserQuestion    IUserQuestionDo
	UserTask        IUserTaskDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Doc:             q.Doc.WithContext(ctx),
		DocQuestion:     q.DocQuestion.WithContext(ctx),
		ExchangeGift:    q.ExchangeGift.WithContext(ctx),
		Form:            q.Form.WithContext(ctx),
		Gift:            q.Gift.WithContext(ctx),
		Monster:         q.Monster.WithContext(ctx),
		MonsterQuestion: q.MonsterQuestion.WithContext(ctx),
		Npc:             q.Npc.WithContext(ctx),
		NpcTask:         q.NpcTask.WithContext(ctx),
		Question:        q.Question.WithContext(ctx),
		QuestionAnswer:  q.QuestionAnswer.WithContext(ctx),
		QuestionSelect:  q.QuestionSelect.WithContext(ctx),
		Shop:            q.Shop.WithContext(ctx),
		Task:            q.Task.WithContext(ctx),
		User:            q.User.WithContext(ctx),
		UserQuestion:    q.UserQuestion.WithContext(ctx),
		UserTask:        q.UserTask.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
